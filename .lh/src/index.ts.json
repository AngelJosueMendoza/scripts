{
    "sourceFile": "src/index.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750188143566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750188143566,
            "name": "Commit-0",
            "content": "import { apiRootQA } from \"./commercetoolsQA/client\";\nimport { argv } from \"bun\";\nimport type { Folios, ShipmentData } from \"./interface/services.interface\";\nimport { CreateFolios } from \"./estafetaAPI/folios\";\nimport { generatorFolios } from \"./actions/generatorFolios\";\nimport {\n  readXlsxFile,\n  updatedCustomUserByGuides,\n} from \"./actions/customersCountGuides\";\nimport {\n  deleteOrderById,\n  deleteOrdersByUser,\n  deleteOrdersCustom,\n  deleteOrdersTypeCombo,\n  deleteOrderTypeBundleEmptys,\n} from \"./actions/orders\";\nimport { read } from \"fs\";\nimport path from \"path\";\nimport { backGuidesRecolections } from \"./actions/recolections\";\nimport { getGuidesByUser, updateUserGuides } from \"./actions/users\";\n\nconst orderNumber = argv[3];\n\nconst addFoliosOrders = async () => {\n  console.log(\"Buscando orden\");\n  const order = await apiRootQA\n    .orders()\n    .withOrderNumber({ orderNumber })\n    .get()\n    .execute();\n  if (!order.statusCode || order.statusCode >= 300) {\n    console.error(\"Hubo un error al recuperar la orden\");\n    return;\n  }\n  if (!order.body) return console.error(\"Order not found\");\n  console.log(\"Orden encontrada\");\n  const services: ShipmentData = JSON.parse(\n    order.body.custom?.fields[\"services\"],\n  );\n  console.log(\"Actualizando QRS\");\n  for (const keys of Object.keys(services)) {\n    const quantityGuides = services[keys].guides.length;\n\n    const folios = await CreateFolios(quantityGuides);\n    if (!folios.data.success)\n      return console.error(\"Folios no pudieron ser recuperados\");\n    const foliosResults: Folios[] = folios.data.folioResult;\n    for (const guides of services[keys].guides) {\n      guides.QR = `Q3SQR${foliosResults[0].folioMD5}`;\n      foliosResults.shift();\n    }\n  }\n  console.log(\"Qrs actualizados\");\n  console.log(\"Actualizando orden\");\n  await apiRootQA\n    .orders()\n    .withOrderNumber({ orderNumber })\n    .post({\n      body: {\n        version: order.body.version,\n        actions: [\n          {\n            action: \"setCustomField\",\n            name: \"services\",\n            value: JSON.stringify(services),\n          },\n        ],\n      },\n    })\n    .execute();\n\n  console.log(\"Completado\");\n};\n\nconst validateQrs = async () => {\n  try {\n    const customerEmail = argv[2];\n    const limitOrders = parseInt(argv[3]);\n    const customer = await apiRootQA\n      .customers()\n      .get({\n        queryArgs: {\n          where: `email in (\"${customerEmail}\")`,\n        },\n      })\n      .execute();\n    const orders = await apiRootQA\n      .orders()\n      .get({\n        queryArgs: {\n          where: `customerId in (\"${customer.body.results[0].id}\")`,\n          limit: limitOrders,\n          sort: \"createdAt desc\",\n        },\n      })\n      .execute();\n    console.log(`Se encontraron ${orders.body.results.length} oirdenes`);\n    if (!orders.statusCode || orders.statusCode >= 300)\n      return console.error(\"No se encontraron ordenes\");\n    for (const order of orders.body.results) {\n      const services: ShipmentData =\n        order.custom?.fields[\"services\"] &&\n        JSON.parse(order.custom?.fields[\"services\"]);\n      if (!services) continue;\n      for (const keys of Object.keys(services)) {\n        let quantityGuides = 0;\n        try {\n          quantityGuides = services[keys].guides.length;\n        } catch (err: any) {\n          continue;\n        }\n        const qrs = services[keys].guides.find((item) => item.QR == \"0\");\n        if (!qrs) continue;\n        console.log(\"Cambiando qrs\");\n        const folios = await CreateFolios(quantityGuides);\n        if (!folios.data.success)\n          return console.error(\"Folios no pudieron ser recuperados\");\n        const foliosResults: Folios[] = folios.data.folioResult;\n        for (const guides of services[keys].guides) {\n          guides.QR = `Q3SQR${foliosResults[0].folioMD5}`;\n          foliosResults.shift();\n        }\n      }\n      console.log(\"Qrs actualizados\");\n      console.log(\"Actualizando orden\");\n      await apiRootQA\n        .orders()\n        .withId({ ID: order.id })\n        .post({\n          body: {\n            version: order.version,\n            actions: [\n              {\n                action: \"setCustomField\",\n                name: \"services\",\n                value: JSON.stringify(services),\n              },\n            ],\n          },\n        })\n        .execute();\n      console.log(`Orden con id ${order.id} actualizado`);\n      console.log(\"------------------------------------\");\n    }\n  } catch (err: any) {\n    console.log(err);\n  }\n};\n\nconst selectOption = () => {\n  const option = parseInt(argv[2]);\n  switch (option) {\n    case 1:\n      addFoliosOrders();\n      break;\n    case 2:\n      generatorFolios(orderNumber);\n      break;\n  }\n};\n\nconst updatedUsers = async () => {\n  const file = \"./customers.xlsx\";\n  const filePath = path.resolve(file);\n  const readFile = await readXlsxFile(filePath);\n  for (const customers of readFile) {\n    //console.log(customers[\"mordoneza@amda.mx\"])\n    //await updatedCustomUserByGuides(customers[\"mordoneza@amda.mx\"])\n    //await deleteOrderById(customers[\"179aab26-c89d-4fcc-949e-80ac540872d4\"])\n  }\n};\n\nupdatedCustomUserByGuides(\"mala_aline@hotmail.com\");\n"
        }
    ]
}